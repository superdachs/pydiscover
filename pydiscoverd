#!/usr/bin/env python
# coding: utf-8

import argparse
import os
import sys
import time
import atexit
import logging
import signal
from bs4 import BeautifulSoup
from threading import Thread
import time
import datetime
import nmap
import libnmap.process
import libnmap.parser
import re

class Daemon(object):
    """
    A generic daemon class.

    Usage: subclass the Daemon class and override the run() method
    """

    def __init__(self, pidfile, stdin='/dev/null',
                 stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile

    def daemonize(self):
        """
        do the UNIX double-fork magic, see Stevens' "Advanced 
        Programming in the UNIX Environment" for details (ISBN 0201563177)
        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
        """
        # Do first fork
        self.fork()

        # Decouple from parent environment
        self.dettach_env()

        # Do second fork
        self.fork()

        # Flush standart file descriptors
        sys.stdout.flush()
        sys.stderr.flush()

        # 
        self.attach_stream('stdin', mode='r')
        self.attach_stream('stdout', mode='a+')
        self.attach_stream('stderr', mode='a+')
       
        # write pidfile
        self.create_pidfile()

    def attach_stream(self, name, mode):
        """
        Replaces the stream with new one
        """
        stream = open(getattr(self, name), mode)
        os.dup2(stream.fileno(), getattr(sys, name).fileno())

    def dettach_env(self):
        os.chdir("/")
        os.setsid()
        os.umask(0)

    def fork(self):
        """
        Spawn the child process
        """
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError as e:
            sys.stderr.write("Fork failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

    def create_pidfile(self):
        atexit.register(self.delpid)
        pid = str(os.getpid())
        open(self.pidfile,'w+').write("%s\n" % pid)

    def delpid(self):
        """
        Removes the pidfile on process exit
        """
        os.remove(self.pidfile)

    def start(self):
        """
        Start the daemon
        """
        # Check for a pidfile to see if the daemon already runs
        pid = self.get_pid()

        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)

        # Start the daemon
        self.daemonize()
        self.run()

    def get_pid(self):
        """
        Returns the PID from pidfile
        """
        try:
            pf = open(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except (IOError, TypeError):
            pid = None
        return pid

    def stop(self, silent=False):
        """
        Stop the daemon
        """
        # Get the pid from the pidfile
        pid = self.get_pid()

        if not pid:
            if not silent:
                message = "pidfile %s does not exist. Daemon not running?\n"
                sys.stderr.write(message % self.pidfile)
            return # not an error in a restart

        # Try killing the daemon process    
        try:
            while True:
                os.kill(pid, signal.SIGTERM)
                time.sleep(0.1)
        except OSError as err:
            err = str(err)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                sys.stdout.write(str(err))
                sys.exit(1)

    def restart(self):
        """
        Restart the daemon
        """
        self.stop(silent=True)
        self.start()

    def run(self):
        """
        You should override this method when you subclass Daemon. It will be called after the process has been
        daemonized by start() or restart().
        """
        raise NotImplementedError


class DiscoveryDaemon(Daemon):

    class ReturnThread(Thread):
        
        def start(self):
            super(DiscoveryDaemon.ReturnThread, self).start()

        def run(self):
            self.exception = None
            try:
                self.ret = self._target(*self._args, **self._kwargs)
            except BaseException as e:
                self.exception = e

        def join(self):
            super(DiscoveryDaemon.ReturnThread, self).join()
            if self.exception:
                raise self.exception
            return self.ret


    IP_RANGES = ['192.168.16.0/24', '192.168.17.0/24']
    PORTS = [22, 80, 443, 161, 23, 1194, 8000]
    HOST_LIST = []
    PORT_LIST = {}
    LOG_LEVEL = 'DEBUG'


    def setup(self):
        try:
            with open("/etc/pydiscoverd/pydiscoverd.conf", "r") as config_file:
                configuration = config_file.read()
        except IOError as io_error:
            self.log(str(io_error), 'ERROR')


    def log(self, message, level='INFO'):
        log_levels = {
                'NONE': 0,
                'ERROR': 1,
                'WARNING': 2,
                'INFO': 3,
                'DEBUG': 4,
                }

        if log_levels[level] > log_levels[self.LOG_LEVEL]:
            return

        with open("/var/log/pydiscoverd/pydiscoverd.log", "a+") as log_file:
            log_file.write("%s %s %s\n" % (str(datetime.datetime.now()), level, message))

                

    def findPorts(self, ip_address):
        self.log('starting port scan...', 'INFO')

  
        nmap_process = libnmap.process.NmapProcess(targets=ip_address, options="-sS")
        nmap_process.run()
        nmap_report = libnmap.parser.NmapParser.parse(nmap_process.stdout)
        self.log("nmap report for " + ip_address + " " + str(nmap_report), 'DEBUG')


        return {ip_address: 
                {
                22: 'udp',
                80: 'tcp',
                443: 'tcp',
                 },
                } 


    def findHosts(self, ip_range):
        self.log('starting host scan...', 'INFO')
        ret_hosts = []

        nmap_process = libnmap.process.NmapProcess(targets=ip_range, options="-sP")
        nmap_process.run()


        nmap_report = libnmap.parser.NmapParser.parse(nmap_process.stdout)
        for host in nmap_report.hosts:
            if host.is_up():
                ret_hosts.append(host.ipv4)
        
        
        self.log(str(ret_hosts), 'DEBUG')
        return ret_hosts


    def scanHosts(self):
        threads = []
        tmp_host_list = []
        for ip_range in self.IP_RANGES:
            thread = self.ReturnThread(target=self.findHosts, args=([ip_range]))
            threads.append(thread)
            thread.start()

        for thread in threads:
            tmp_host_list.extend(thread.join())
            
        self.HOST_LIST = tmp_host_list


    def scanPorts(self):
        threads = []
        tmp_portlist = {}
        for ip_address in self.HOST_LIST:
            thread = self.ReturnThread(target=self.findPorts, args=([ip_address]))
            threads.append(thread)
            thread.start()

        for thread in threads:
            tmp_portlist.update(thread.join())

        self.PORT_LIST = tmp_portlist


    def getResult(self):
        ret_dict = {}
        for host in self.HOST_LIST:
            ret_dict.update({host: self.PORT_LIST[host]})
        return ret_dict

    
    def run(self):
        self.log('deamon started. entering cycle.', 'INFO')
        while True:
            try:
                self.log('starting host scan threads...', 'INFO')
                ht = self.ReturnThread(target=self.scanHosts)
                ht.start()
                self.log('starting port scan threads...', 'INFO')
                pt = self.ReturnThread(target=self.scanPorts)
                pt.start()
                self.log('port and host scans started... now waiting for results...', 'INFO')
                ht.join()
                pt.join()
                self.log('port and host scans finished.', 'INFO')
            except Exception as exception:
                self.log(str(exception), 'ERROR')
            try:
                self.log(str(self.getResult()), 'INFO')
            except Exception as exception:
                self.log(str(exception), 'ERROR')
            self.log("waiting 5 seconds...", 'INFO')
            time.sleep(5)

def main():
    """
    The application entry point
    """
    parser = argparse.ArgumentParser(
        #prog='PROG',
        description='Daemon runner',
        epilog="That's all folks"
    )

    parser.add_argument('operation',
                    metavar='OPERATION',
                    type=str,
                    help='Operation with daemon. Accepts any of these values: start, stop, restart, status',
                    choices=['start', 'stop', 'restart', 'status'])

    args = parser.parse_args()
    operation = args.operation

    # Daemon
    daemon = DiscoveryDaemon('/tmp/pydiscover.pid',
    )

    daemon.setup()

    if operation == 'start':
        print("Starting daemon")
        daemon.start()
        pid = daemon.get_pid()

        if not pid:
            print("Unable run daemon")
        else:
            print("Daemon is running [PID=%d]" % pid)

    elif operation == 'stop':
        print("Stoping daemon")
        daemon.stop()

    elif operation == 'restart':
        print("Restarting daemon")
        daemon.restart()
    elif operation == 'status':
        print("Viewing daemon status")
        pid = daemon.get_pid()

        if not pid:
            print("Daemon isn't running ;)")
        else:
            print("Daemon is running [PID=%d]" % pid)

    sys.exit(0)

if __name__ == '__main__':
    main()
